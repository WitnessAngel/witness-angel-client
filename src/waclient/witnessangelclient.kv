# GUI template automatically loaded by name convention #
#:kivy 1.8.0
#:import time time.time
#:import randint random.randint
#:import to_rgba kivy.utils.get_color_from_hex
#:import tr waclient.app.tr
#:import KivyConsole waclient.utilities.widgets.KivyConsole

#:set link_clr '222222'
#:set kivy_github 'https://github.com/kivy/kivy'
#:set cookiecutter_github 'https://github.com/audreyr/cookiecutter'
#:set cookiedozer_github 'https://github.com/hackebrot/cookiedozer'
#:set repo_github 'https://github.com/pakal/witness-angel-client'
#:set fsize 15

<Slide@BoxLayout>:
    bg_hex_clr: '000000'
    orientation: 'vertical'
    canvas.before:
        Color:
            rgba: to_rgba(root.bg_hex_clr)
        Rectangle:
            pos: self.pos
            size: self.size


<RefLabel>:
    halign: 'center'
    font_size: fsize
    markup: True


<TransitionProgress>:
    size_hint: 0.8, 0.1
    value: app.timer


<TabbedPanelHeader>:
    font_size: '15sp'



<InterfaceWithTabbedPanel>:
    tabbedpanel: tp
    TabbedPanel:
        id: tp
        size: root.size
        pos: root.pos
        #do_default_tab: False
        background_color: (0,0,0,1)
        tab_width: '200dp'  # ADDED THIS


<ConsoleOutput>:
    readonly: True
    padding: 6, 6
    size_hint: (1, None)


<KivyConsole>:
    console_output: console_output
    scroll_view: scroll_view
    ScrollView:
        id: scroll_view
        bar_width: 10
        ConsoleOutput:
            id: console_output
            height: max(self.parent.height, self.minimum_height)
            font_name: root.font_name
            font_size: root.font_size - 1
            foreground_color: root.foreground_color
            background_color: root.background_color

ScreenManager:

    Screen:
        name: "dashboard"

        BoxLayout:
            orientation: 'vertical'
            spacing: 20
            ActionBar:
                pos_hint: {'top':1}
                ActionView:
                    use_separator: True
                    ActionPrevious:
                        title: tr._('Witness Angel')
                        with_previous: False
                    ActionOverflow:
                    #ActionButton:
                    #    icon: 'atlas://data/images/defaulttheme/overflow'
                    #ActionButton:
                    #    text: tr._('LogTest')
                    #    on_release: app.log_output("Time: %d" % time())
                    ActionButton:
                        text: tr._('Containers')
                        on_release: root.current = "containers"
    #                ActionGroup:
    #                    text: 'Group1'
    #                    ActionButton:
    #                        text: 'Btn5'
    #                    ActionButton:
    #                        text: 'Btn6'
    #                    ActionButton:
    #                        text: 'Btn7'

                    ActionGroup:
                        mode: "spinner"
                        icon: 'data/icons/settings3.png'
                        text: tr._('Settings')
                        ActionButton:
                            text: 'Encryption'
                            on_press: root.current = "hardcoded_conf"
                        ActionButton:
                            text: tr._("Preferences")
                            on_press: app.open_settings()

            ToggleButton:
                id: recording_btn
                text: tr._('Start Witness Angel') if self.state == 'normal' else tr._('Stop Witness Angel')
                pos_hint: {'center_x': 0.5}
                size_hint: (0.7, 0.2)
                on_state: app.switch_to_recording_state(is_recording=(self.state == "down"))

            KivyConsole:
                id: kivy_console
                canvas.after:
                    Color:
                        rgba: 1,1,1,1
                    Line:
                        points: 0, self.height, self.width-1, self.height
                        #self.x+1,self.y+1,self.width-1,self.height-1
                        #dash_offset: 5
                        #dash_length: 3
     #       Button:
     #           text: "I'm another label"
     #           pos_hint: {'center_x': 0.5}
     #           size_hint: (0.7, 0.6)
     #           on_press: root.current = 'settings'


    Screen
        name: "containers"
        on_pre_enter: filebrowser.selection=[] ; app.refresh_filebrowser()

        BoxLayout:
            orientation: 'vertical'

            ActionBar:
                pos_hint: {'top':1}
                ActionView:
                    ActionPrevious:
                        title: tr._('Back')
                        with_previous: True
                        on_press: root.current = "dashboard"
                    ActionOverflow:
                    ActionButton:
                        text: tr._('Refresh')
                        on_press: app.refresh_filebrowser()

                    ActionGroup:
                        mode: "spinner"
                        text: 'Operations'
                        ActionButton:
                            text: ' '
                        ActionButton:
                            text: '/!\ PURGE'
                            on_press: filebrowser.selection = [] ; app.purge_all_containers()

            FileChooserListView:
                id: filebrowser
                on_selection: decryption_request_btn.disabled = not bool(self.selection)
                path: app.internal_containers_dir()
                rootpath: app.internal_containers_dir()
                filters: ["*.crypt"]
                multiselect: False
                sort_func: lambda files, fs: sorted(files, reverse=True)

            Splitter:
                sizable_from: 'top'
                min_size: 20
                rescale_with_parent: False
                #Label:
                #    text: tr._("Please select a file") if not filebrowser.selection else str(app.get_stat(filebrowser.selection[0]))
                    # Here we just print the stats of the folder to check if we can read a foler.
                BoxLayout:
                    orientation: 'vertical'
                    ScrollView:
                        ConsoleOutput:
                            id: file_info
                            text: app.get_container_info(filebrowser.selection[0] if filebrowser.selection else None)
                            height: max(self.parent.height, self.minimum_height)
                            font_name: kivy_console.font_name
                            font_size: kivy_console.font_size - 1
                            foreground_color: kivy_console.foreground_color
                            background_color: kivy_console.background_color
                    Button:
                        id: decryption_request_btn
                        disabled: True
                        text: tr._('Request Decryption')
                        pos_hint: {'center_x': 0.5}
                        size_hint: (0.7, 0.2)
                        on_press: app.attempt_container_decryption(filebrowser.selection[0]) ; self.disabled = True ; root.current = "dashboard"


    Screen:
        name: "hardcoded_conf"
        BoxLayout:
            orientation: 'vertical'

            ActionBar:
                pos_hint: {'top':1}
                ActionView:
                    ActionPrevious:
                        title: tr._('Back')
                        with_previous: True
                        on_press: root.current = "dashboard"
                    ActionOverflow:
            Label:
                text: tr._("Encryption mode (hardcoded)")
                size_hint: (None, 0.1)
                pos_hint: {'center': 1}
                text_size: (self.parent.width, self.height)
                halign: "center"
                valign: "middle"
                #height: "20px"
                size: self.texture_size
            ScrollView:
                ConsoleOutput:
                    id: encryption_conf
                    text: app.get_encryption_conf_text()
                    height: max(self.parent.height, self.minimum_height)
                    font_name: kivy_console.font_name
                    font_size: kivy_console.font_size - 1
                    foreground_color: kivy_console.foreground_color
                    background_color: kivy_console.background_color

    Screen:  # This is and old demo of carousel!
        name: "settings"
        AnchorLayout:
            anchor_y: 'bottom'
            Carousel:
                id: carousel
                loop: True
                Slide:
                    name: 'hello'
                    bg_hex_clr: '154152'
                    Label:
                        text: tr._("'Witness Angel Client'\n\nA sleek slideshow app that supports swipe gestures.")
                Slide:
                    name: 'kivy'
                    spacing: 10
                    bg_hex_clr: '057173'
                    Label:
                        text_size: self.size
                        valign: 'bottom'
                        text: tr._("This app uses Kivy, a Python Framework for NUI Development.")
                    RefLabel:
                        text_size: self.size
                        valign: 'top'
                        text:
                            "[ref={kivy_github}][color={link_clr}]{kivy_github}[/color][/ref]" \
                            "".format(**locals())
                Slide:
                    name: 'cookiecutterdozer'
                    spacing: 10
                    bg_hex_clr: '487353'
                    Label:
                        valign: 'bottom'
                        text_size: self.size
                        text: tr._("It was generated with the Python command-line utility\nCookiecutter along with Cookiedozer.")
                    RefLabel:
                        valign: 'top'
                        text_size: self.size
                        text:
                            "[ref={cookiecutter_github}][color={link_clr}]{cookiecutter_github}[/color][/ref]\n" \
                            "[ref={cookiedozer_github}][color={link_clr}]{cookiedozer_github}[/color][/ref]\n" \
                            "".format(**locals())
                Slide:
                    name: 'license'
                    bg_hex_clr: 'C2872E'
                    Label:
                        text: tr._("Distributed under the terms of the MIT license,\n'Witness Angel Client' is free and open source software.")
                Slide:
                    name: 'github'
                    spacing: 10
                    bg_hex_clr: 'AB3E2B'
                    Label:
                        valign: 'bottom'
                        text_size: self.size
                        text: tr._("Fork me on GitHub")
                    RefLabel:
                        valign: 'top'
                        text_size: self.size
                        text:
                            "[ref={repo_github}][color={link_clr}]{repo_github}[/color][/ref]" \
                            "".format(**locals())
            TransitionProgress:
                id: progress_bar
